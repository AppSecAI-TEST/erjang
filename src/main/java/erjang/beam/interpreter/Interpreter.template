/** -*- mode:java; tab-width: 4 -*-
 * This file is part of Erjang - A JVM-based Erlang VM
 *
 * Copyright (c) 2010 by Trifork
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

package erjang.beam.interpreter;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import erjang.EModule;
import erjang.EModuleManager;
import erjang.EFun;
import erjang.EFunHandler;
import erjang.FunID;

import erjang.ERT;
import erjang.EProc;

import erjang.EObject;
import erjang.EAtom;
import erjang.ESeq;
import erjang.ECons;
import erjang.ETuple;
import erjang.EBinary;

import erjang.beam.BeamFileData;
import erjang.beam.ModuleVisitor;
import erjang.beam.FunctionVisitor;
import erjang.beam.BlockVisitor;

import erjang.beam.repr.Insn;
import erjang.beam.repr.Operands;
import erjang.beam.repr.ExtFun;
import erjang.beam.repr.FunctionInfo;
// import static erjang.beam.repr.Insn.*;

import kilim.Pausable;

public class Interpreter {
#ENUM#
	public static final short ENSURE_REG_CAPACITY = MAX_OPCODE + 1;

	public static EModule beamFileToEModule(BeamFileData bfd) {
		Encoder encoder = new Encoder();
		bfd.accept(encoder);
		return encoder.toEModule();
	}

	public static class Encoder implements ModuleVisitor {
		private EAtom moduleName;
		final HashMap<Integer,Insn> insn_start = new HashMap<Integer,Insn>();
		final ArrayList<Short>     code      = new ArrayList<Short>();
		final ArrayList<EObject>   consts    = new ArrayList<EObject>();
		final ArrayList<ValueJumpTable> value_jump_tables = new ArrayList<ValueJumpTable>();
		final HashMap<EObject,Integer>	const_map = new HashMap<EObject,Integer>();
		final HashMap<Integer,Integer>	label_map = new HashMap<Integer,Integer>();
		final ArrayList<Backpatch>	    backpatches = new ArrayList<Backpatch>();
		final HashMap<FunID,Integer>	ext_fun_map = new HashMap<FunID,Integer>();
		final ArrayList<FunID>	imports = new ArrayList<FunID>();
		final ArrayList<FunctionInfo>	raw_exports = new ArrayList<FunctionInfo>();

		public void visitModule(EAtom name) {
			System.err.println("Interpreter.Encoder| doing module "+name);
			this.moduleName = name;
		}

		public void visitExport(EAtom fun, int arity, int entryLabel) {
			raw_exports.add(new FunctionInfo(moduleName, fun, arity, entryLabel));
		}

		public void visitAttribute(EAtom att, EObject value) {}

		public void visitEnd() {
			System.err.println("Interpreter code for module '"+moduleName+"':");

			for (Backpatch bp : backpatches) {
				System.err.println("INT| backpatching "+bp+" (label "+bp.label+") => "+label_map.get(bp.label));
				bp.patch(label_map.get(bp.label));
			}

			for (int i=0; i<code.size(); i++) {
				Insn insn = insn_start.get(i);
				System.err.println((insn!=null? "*" : " ") + i +
								   ": " + code.get(i) +
								   (insn!=null ? ("\t"+insn.toSymbolic().toString()) : ""));
			}
		}

		public Module toEModule() {
			short[] codeArray = toShortArray(code);
			EObject[] constArray = consts.toArray(new EObject[consts.size()]);
			ValueJumpTable[] valueJumpTableArray = value_jump_tables.toArray(new ValueJumpTable[value_jump_tables.size()]);
			List<FunIDWithEntry> exports = convertExports(raw_exports);
			System.err.println("INT| Constructing module for "+moduleName.getName());
			Module m = new Module(moduleName.getName(),
								  codeArray, constArray, valueJumpTableArray,
								  exports, imports);
			return m;
		}

		static short[] toShortArray(List<Short> org) {
			int len = org.size();
			short[] res = new short[len];
			for (int i=0; i<len; i++) res[i] = org.get(i);
			return res;
		}

		List<FunIDWithEntry> convertExports(List<FunctionInfo> org) {
			List<FunIDWithEntry> res = new ArrayList(org.size());
			for (FunctionInfo fi : org) {
				res.add(new FunIDWithEntry(fi.mod, fi.fun, fi.arity,
										   label_map.get(fi.label)));
			}
			return res;
		}


		public FunctionVisitor visitFunction(EAtom name, int arity, int startLabel) {
			return new FunctionEncoder(name, arity, startLabel);
		}

		//---------- Utility functions: --------------------
		protected int codePos() {return code.size();}

		protected void emit(short val) {code.add(val);}
		protected void emitAt(int pos, short val) {code.set(pos,val);}
		protected void nop(int code_pos) {
			code.remove(code_pos);
			code.subList(code_pos, code.size()).clear();
		}

		protected void emit(int intval) {
			short val = (short) intval;
			if (val!=intval) throw new Error("Value too large to be encoded: "+intval);
			code.add(val);
		}
		protected void emitAt(int pos, int intval) {
			short val = (short) intval;
			if (val!=intval) throw new Error("Value too large to be encoded: "+intval);
			code.set(pos, val);
		}

		protected int encodeLiteral(Operands.Literal lit) {
			EObject value = lit.literalValue();
			Integer index = const_map.get(value);
			if (index == null) {
				index = const_map.size();
				consts.add(value);
				const_map.put(value, index);
			}
			return index;
		}

		protected int encodeExtFun(ExtFun extfun) {
			FunID id = new FunID(extfun.mod, extfun.fun, extfun.arity);
			Integer index = ext_fun_map.get(id);
			if (index == null) {
				index = imports.size();
				imports.add(new FunID(extfun.mod, extfun.fun, extfun.arity));
				ext_fun_map.put(id, index);
				System.err.println("INT| ext-fun mapping: "+index+" ==> "+extfun);
			}
			return index;
		}

		protected int encodeValueJumpTable(Operands.SelectList jumpTable) {
			final ValueJumpTable table = new ValueJumpTable();
			for (int i=0; i<jumpTable.size(); i++) {
				final EObject value = ((Operands.Literal)jumpTable.getValue(i)).literalValue();
				int label = jumpTable.getLabel(i).nr;
				table.put(value, -12347);
				backpatches.add(new Backpatch(label) {
					public void patch(int labelOffset) {
						table.put(value, labelOffset);
					}});
			}
			int index = value_jump_tables.size();
			value_jump_tables.add(table);
			return index;
		}

		protected int encodeLabel(int label) {
			if (label_map.containsKey(label)) {
				return label_map.get(label);
			} else {
				if (label!=0) {
					final int codePos = codePos();
					backpatches.add(new Backpatch(label) {
						public void patch(int labelOffset) {
							emitAt(codePos, labelOffset);
						}});
				}
				return -12348;
			}
		}

		protected void registerLabel(int beamLabel) {
			assert(! label_map.containsKey(beamLabel));
			label_map.put(beamLabel, codePos());
		}

		//--------------------------------------------------

		class FunctionEncoder implements FunctionVisitor, BlockVisitor {
			final EAtom name;
			final int arity;
			final int startLabel;
			private int tuple_pos;

			public FunctionEncoder(EAtom name, int arity, int startLabel) {
				this.name = name;
				this.arity = arity;
				this.startLabel = startLabel;
			}

			/** Common for FunctionVisitor and BlockVisitor... */
			public void visitEnd() {}

			public BlockVisitor visitLabeledBlock(int label) {
				registerLabel(label);
				return this;
			}

			public void visitInsn(Insn insn) {
				int opcode_pos = codePos();
				emit(-12345); // Place holder.
				insn_start.put(opcode_pos, insn);

				//System.err.println("@ "+opcode_pos+": "+insn.toSymbolic());
				switch (insn.opcode()) {
#ENCODE#
				} // switch
			}
		}
	}

    public static class Module extends EModule {
		final private String name;
		final private short[] code;
		final private EObject[] consts;
		final private ValueJumpTable[] value_jump_tables;
		final private List<FunIDWithEntry> exports;
		final private List<FunID> imports;
		final private EFun[] ext_funs;

		Module(String name,
			   short[] code, EObject[] consts,
			   ValueJumpTable[] value_jump_tables,
			   List<FunIDWithEntry> exports, List<FunID> imports)
		{
			super(true);
			this.name = name;
			this.code = code;
			this.consts = consts;
			this.value_jump_tables = value_jump_tables;
			this.exports = exports;
			this.imports = imports;
			ext_funs = new EFun[imports.size()];
			System.err.println("INT| Constructed module for "+this.name);
			setup();
		}

		public String module_name() {return name;}

		/**
		 * This method is used by EModuleManager in function resolution.
		 */
		public void registerImportsAndExports() throws Exception {
			for (int i=0; i<imports.size(); i++) {
				FunID imp = imports.get(i);
				System.err.println("INT| Import #"+i+": "+imp);
				EModuleManager.add_import(imp, new ExtFunBinder(imp, i));
			}

			int j=0;
			for (FunIDWithEntry fi : exports) {
				System.err.println("INT| Export #"+(j++)+": "+fi);
				EFun fun = EFun.get_fun_with_handler(fi.arity, new Function(fi.start_pc));
				EModuleManager.add_export(this, fi, fun);
			}
		}

		class ExtFunBinder extends EModuleManager.FunctionBinder {
			final FunID funID; // (Technically superfluous?)
			final int index;
			public ExtFunBinder(FunID funID, int index) {
				this.funID = funID;
				this.index = index;
			}

			public FunID getFunID() {
				return funID;
			}

			public void bind(EFun value) {
				ext_funs[index] = value;
			}
		}

		class Function implements EFunHandler {
			final int start_pc;

			public Function(int start_pc) {
				this.start_pc = start_pc;
			}

			public EObject invoke(final EProc proc, final EObject[] args) throws Pausable {
				return invoke(proc, args, args.length, start_pc);
			}

			public EObject invoke(final EProc proc, final EObject[] args, int argCnt, int pc) throws Pausable {
				System.err.println("INT| invoking "+name+"@"+pc+"...");
				final short[] code = Module.this.code;
				EObject stack[] = proc.stack;
				int sp = proc.sp;
				EObject[] reg = new EObject[argCnt+2]; //??
				for (int i=0; i<argCnt; i++) {reg[i] = args[i];} //??
				for (int i=0; i<argCnt; i++) System.err.println("INT| arg#"+i+"="+args[i]);

				// For exception handling:
				int exh = -1;

				// For tuple construction:
				ETuple curtuple = null;

				while (true) {
					final int opcode = code[pc++];
					System.err.println("INTP| (pc="+(pc-1)+"; sp="+sp+")"+opcode+"   "+reg[0]);
					switch (opcode) {
					case ENSURE_REG_CAPACITY: {
						int max_x = code[pc++];
						System.err.println("INTP| Ensure reg capacity: "+max_x);
						reg = ensureCapacity(reg, max_x);
					} break;
#INTERPRET#
					default:
						throw new Error();
					}
				}
			}

			public ESeq xregsSeq(EObject[] reg, int arity) {
				ESeq res = ERT.NIL;
				for (int i=arity-1; i>=0; i--) {
					res = res.cons(reg[i]);
				}
				return res;
			}

			public EObject[] xregsArray(EObject[] reg, int arity) {
				EObject[] res = new EObject[arity];
				System.arraycopy(reg,0, res,0, arity);
				return res;
			}

			public int lookupValueJumpTable(ValueJumpTable jumpTable,
											EObject key, int defaultLabel)
			{
				Integer lbl = jumpTable.get(key);
				return (lbl != null) ? lbl.intValue() : defaultLabel;
			}

		} // class Function
    } // class Module


	private static EObject[] ensureCapacity(EObject[] array, int atLeast) {
		if (atLeast >= array.length) {
			EObject[] tmp = new EObject[(atLeast)*3/2];
			System.arraycopy(array,0, tmp,0, array.length);
			array = tmp;
		}
		return array;
	}

	private static EObject[] ensureCapacity(EObject[] array, int atLeast, int keep) {
		if (atLeast >= array.length) {
			EObject[] tmp = new EObject[(atLeast)*3/2];
			System.arraycopy(array,0, tmp,0, keep);
			array = tmp;
		}
		return array;
	}

	static class FunIDWithEntry extends FunID {
		final int start_pc;

		public FunIDWithEntry(EAtom mod, EAtom fun, int arity, int start_pc) {
			super(mod, fun, arity);
			this.start_pc = start_pc;
		}
	}

	static class ValueJumpTable extends HashMap<EObject,Integer> {
		public int lookup(EObject key, int defaultLabel) {
			Integer lbl = get(key);
			return (lbl != null) ? lbl.intValue() : defaultLabel;
		}
	}

	static abstract class Backpatch {
		final int label;
		public Backpatch(int label) { this.label=label; }
		public abstract void patch(int labelOffset);
	}
}
